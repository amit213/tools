#!/bin/sh
#!/bin/bash
#ss 
#author :: amit213
#revision history / summary.
#milestones

## This is the long running shell rc.. abc

echo "Mr. Anderson, Welcome Home."

#shell prompt facelift
#export PS1="\u@\h:[\W]$ "
PS1='\[\e[1;32m\]\u@\h\[\e[m\]:\[\e[1;34m\][\W]\[\e[m\]$ '
export SHELL=bash
export EDITOR=vim

## global variables. platform agnostic.
  osname=`uname`
  osname_lowercase=`uname | tr '[:upper:]' '[:lower:]'`
  hostname=`hostname`
  myshellrcfilename=".myshellrc.rc" 
  tmpaliasfilename=".temp-aliasmap.tmp"
  quoteofthedayfilename=".quote-of-the-day"
  mycustomshellrcfilename=".customshellrc"
  historydumpfile="last.txt"
  issueFile="/etc/issue"
  _TRUE=0
  _FALSE=1
  shellrc_dbg=0
  cpustring=""
  hostfirstname=""
  osverstring=""
  ctagsbin='ctags'
  quickeditor='vim'






#local section
  alias s='source ~/$myshellrcfilename'

#screen section
  alias sc='screen -dr'
  alias sls='screen -ls'

#global section
  alias ll='ls -lh'
  alias M='du -sh * | grep M'
  alias G='du -sh * | grep G'


## ==========
#global functions
   is_debug_mode_on() {
     #shell rc ON(1) off(0) debug mode     
     return $shellrc_dbg
   }
   toggle_shellrc_dbg_mode() {
     if (( $shellrc_dbg ))
      then
         shellrc_dbg=0
         echo "shell debug is now OFF"         
      else
         shellrc_dbg=1
         echo "shell debug is now ON"
     fi
   }
   dbg_print_on() {
     is_debug_mode_on
     dbg=$?
     [ $dbg -eq 1 ] && $@
   }
   dbg_print() {
     is_debug_mode_on
     dbgflag=$?
     callerapi=${FUNCNAME[1]}
     linenumb=${LINENO}
     if [ $dbgflag -eq 1 ] && [ "$@" ]
     then
        #we will just print the msg.
        msgval="$@"       
        echo "$callerapi: $msgval"
     else
        #do nothing. 
        msgval="$@"        
     fi
   }
   echo_if_nonempty() {
     if [[ "$@" ]]
      then
        echo $@
      else
        dbg_print $@        
      fi
   }
   #check if param is empty
   is_param_empty() {
      if [[ "$@" ]]
      then
        return $_FALSE
      else
        return $_TRUE  
      fi      
   }
   myecho() {
      funcname=$1
      #msgval = entire msg except for the first param.
      msgval=$(echo $@ | awk '{$1="";print $0}')
      echo "$1 :$msgval"
   }

   # check if file exists
   is_file_present() {
     flag=0
     dbg_print "checking if file: $1 exists?"
     dbg_print "[${*}]"
     if [ -z "$1" ]
     then
       return $flag  #empty param.
     fi
     if [  -L $1 ] 
     then
        dbg_print "$1 is a link and was found."
        flag=1
     elif [[ -f $1 ]]
     then
        dbg_print "$1 is a file and was found."
        flag=1
     elif [[ -s $1 ]]
     then
        dbg_print "file $1 found."
     fi
     return $flag 
   }

   #wrapper over is file present
   file_present() {
     dbg_print "[${*}]"
     is_file_present $1
     if (( "$?" ))
      then
        return $_TRUE
       else
        return $_FALSE
     fi
   }
   #detech if this is osx platform
   if_this_is_osx() {     
     if [ "$osname_lowercase" == "darwin" ] 
     then
      return $_TRUE
     else
      return $_FALSE
     fi
   }

   #setup docker specific aliases
   set_docker_alias() {
     #alias drmi='docker images --no-trunc | grep none | awk '{print $3}' | xargs docker rmi'
     alias dimg='docker images'
     alias dps='docker ps; docker ps -a'     
     alias dcleancontainer='docker rm $(docker ps -a | awk '\''{print $1}'\'' | grep [0-9,a-f])'
     alias dcleanimg='docker rmi $(docker images | grep "^<none>" | awk "{print $3}")'
     alias dclean='dcleancontainer;'
   }

   function hg () { 
     if is_param_empty "$@"
     then
        :
     else
        history | grep -i $* ;
     fi
   }

   are_we_online() {
    wget -q --tries=2 --timeout=1 --spider http://google.com
    if [[ $? -eq 0 ]]; then
            dbg_print "Online"
            return $_TRUE
    else
            dbg_print "Offline"
            return $_FALSE
    fi
   }
   mm() {
     top -l 1 | head -n 10 | grep PhysMem
   }
   # build and update cscope db files.
   # todo : add file extension support
   build_run_cscope() {
     tmpstr="*.$1"   
     #find . -name "$tmpstr" > cscope.files
     #find . -name "*.py" -o -name "*.js" -o -name "*.c" -o -name "*.h" > cscope.files
     #find . -name "*.js" -o -name "*.json" -o name "*.feature" > cscope.files
     #find . -name "*.js" -name "*.json" -name "*.feature" > cscope.files
     find . -name "*.js" -o -name "*.json" -o -name "*.feature" > cscope.files
     $ctagsbin -R .     
     cscope -uR
   }
   sayg() { 
     wget -q -U Mozilla -O $(tr ' ' _ <<< "$1"| 
     cut -b 1-15).mp3 "http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=$(tr ' ' + <<< "$1")"; 
   }
   #add this app to trusted app list for osx
   bless_this_app() {
     if if_this_is_osx     
      then
        echo "xattr -d -r com.apple.quarantine /Applications/yourApp.app"
     fi      
   }
   #invokes the favorite editor.
   myedit() {
     if if_this_is_osx     
      then
        if file_present $1
        then
          open -a $quickeditor $1
        fi
     fi          
   }
   listen() {
     lsof -iTCP:$1 -sTCP:LISTEN
   }
   chsm() {
     openssl dgst -md5 $1
   }

   xkcd() {
     curl -s 'http://xkcd.com/rss.xml' | xpath '//item[1]/description/text()' 2>&1 | 
     sed -n 's/.*title="\([^"]*\)".*/\1/p' | fold -s
   }

   xkcd-view() {
     wget -O /tmp/.xkcd_$(date +%y-%m-%d).png `lynx --dump http://xkcd.com/ | 
     grep png` > /dev/null 2>&1 ; open /tmp/.xkcd_$(date +%y-%m-%d).png
   }


   xkcd-random() {
     wget -O /tmp/.xkcd_$(date +%y-%m-%d).png `lynx --dump dynamic.xkcd.com/comic/random/ |
     grep png` > /dev/null 2>&1 ; open /tmp/.xkcd_$(date +%y-%m-%d).png
   }
   #speed check on console.
   speed_check() { 
     #wget -O /dev/null http://download.fedoraproject.org/pub/fedora/linux/releases/20/Live/x86_64/Fedora-Live-Desktop-x86_64-20-1.iso
     wget -O /dev/null http://uec-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img
   }
   #text based weather.
   weather() {
    curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<YOURZIPORLOCATION>}" |
    perl -ne '/<title>([^<]+)/&&printf "%s: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';
   }

   #print all local IPs for osx
   get_all_local_ip_for_osx() {
     listoflocalIPs=`ifconfig | grep inet | grep netmask | awk '{print $2}'`
     tmplist=""
     for i in $listoflocalIPs
     do
        tmplist="$i  |  $tmplist  "
     done
     tmplist="LocalIPs --> $tmplist"
     listoflocalIPs=$tmplist
     unset tmplist     
   }
   #setup ssh related aliases
   set_target_ssh_user_ip_port() {
     echo "target-ip-port $1 $2 $3"   /tmp/.$USER-target-ip-port.tmp
   }

   ssh_to_target_ip_port() {
     if file_present /tmp/.$USER-target-ip-port.tmp
     then
      userval=`cat /tmp/.mbuser-target-ip-port.tmp | tail -n 1 | awk '{print $2}'`
      ipval=`cat /tmp/.mbuser-target-ip-port.tmp | tail -n 1 | awk '{print $3}'`
      portval=`cat /tmp/.mbuser-target-ip-port.tmp | tail -n 1 | awk '{print $4}'`
      echo "running ssh -C $userval@$ipval -p $portval"
      ssh -C $userval@$ipval -p $portval
     else
      echo "target ip port is not set."
     fi     
   }

   set_ssh_alias() {
     alias target-user-ip-port=set_target_ssh_user_ip_port
     alias tsh=ssh_to_target_ip_port
   }
   set_distro_name() {
    if file_present $issueFile
    then
      distroName=`cat /etc/issue | grep [a-z] | awk '{ print $1 }' | tr '[:upper:]' '[:lower:]'` 
      dbg_print "setting distroName : $distroName"
    else
      distroName=$osname_lowercase
    fi
   }

   #load up custom configuration
   load_customized_shellrc() {    
     if file_present $HOME/$mycustomshellrcfilename
     then
        dbg_print "loading custom shellrc : $HOME/$mycustomshellrcfilename"
        source $HOME/$mycustomshellrcfilename
     else
        dbg_print "no custom shellrc found. file: $HOME/$mycustomshellrcfilename"
     fi
   }

   # search engine on console
   function search {
          Q="$@";GOOG_URL='https://www.google.com/search?tbs=li:1&q=';AGENT="Mozilla/4.0";
          stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}");echo "$stream" | 
          grep -o "href=\"/url[^\&]*&amp;" | 
          sed 's/href=".url.q=\([^\&]*\).*/\1/';
   }

   function q {
          wget -q -O ~/$quoteofthedayfilename https://www.goodreads.com/quotes_of_the_day; 
          cat ~/$quoteofthedayfilename | grep '&ldquo;\|/author/show' | 
          sed -e 's/<[a-zA-Z\/][^>]*>//g' | sed 's/&ldquo;//g' | sed 's/&rdquo;//g'
          #osascript -e 'display notification "Lorem ipsum dolor sit amet" with title "Title"'
   }

   function myshred {
      #openssl enc -aes-256-ecb -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | 
      #base64)" -nosalt < /dev/zero > $1
      echo ""
   }

   toggle_mac_wifi() {
      networksetup -setairportpower airport off
      sleep 1.5
      networksetup -setairportpower airport on
   }

   ## Use this for OSX specific env config.
   set_osx_conf() {
     dbg_print "setting OSX env config."
     #ls gets colors
     export CLICOLOR=1
     #export LSCOLORS=Exfxcxdxbxegedabagacad
     export LSCOLORS=GxFxCxDxBxegedabagaced
     export GREP_OPTIONS='--color=auto'

     alias reloaddns='sudo killall -HUP mDNSResponder'
     alias listdns='scutil --dns | grep nameserver'
     alias bat='ioreg -l | grep Capacity'        
     get_all_local_ip_for_osx
     ## using grc  (generic color utility for console)     
     set_docker_alias
     wifiNetworkname=`/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep ' SSID'`
     cpustring=`sysctl -n machdep.cpu.brand_string`
     hostfirstname=`scutil --get ComputerName`
     osverstring=`sw_vers | awk -F':\t' '{print $2}' | paste -d ' ' - - -`
     macvram=`system_profiler SPDisplaysDataType | grep VRAM`
     #macresolution=`system_profiler SPDisplaysDataType | grep Resolution`
     #macmodelname=`system_profiler SPHardwareDataType | grep "Model Name"`
     batterycyclecount=`system_profiler SPPowerDataType | grep "Cycle Count"`
     macbootvolume=`system_profiler SPSoftwareDataType | grep "Boot Volume"`
     ctagsbin='/usr/local/Cellar/ctags/5.8/bin/ctags'
     quickeditor='/Applications/MacVim.app'
     alias sm=send_mail_msg
     alias capture_screen='screencapture -x /tmp/"screen-shot-`date`".jpg'
     serialnum=`ioreg -c "IOPlatformExpertDevice" | awk 'BEGIN{FS="\""}; /IOPlatformSerialNumber/ {print $4}'`
     notebookSerialNum="Serial Num : $serialnum"
     alias jsr='/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/Resources/jsc'

     EDITOR=vim
     alias wifitog=toggle_mac_wifi
     export JAVA_HOME="/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home"

   }
   #get the public ip
   function myip {
     wget --no-check-certificate -q checkip.dyndns.org -O ~/.index.html && 
     cat ~/.index.html|cut -d ' ' -f 6 | cut -d '<' -f 1
   }
   
   #find ip for kvm vms
   function find_vm_ips {
    #for i in `v | awk '{if(NR>2)print}' | awk '{print $2}' | grep [a-z,0-9]`; do echo "[ $i ] has ip [ `arp -n | grep "$(virsh domiflist $i | grep virtio | awk '{print$5}')" | awk '{print$1}'` ]"; done
    #for i in `virsh list --all | awk '{if(NR>2)print}' | awk '{print $2}' | grep [a-z,0-9]`; do echo "[ $i ] has ip [ `arp -n | grep "$(virsh domiflist $i | grep virtio | awk '{print$5}')" | awk '{print$1}'` ]"; done
    echo "find vm ip for kvm"
   }

   function myip2 {
    curl -s ip.telize.com
    #curl -s icanhazip.com
   }
   show_top() {
    top -o cpu
    #top -o vsize
   }
   make_console_app() {
    pyinstaller --onefile $1
   }

   #shred the file / dir
   shred() {
    echo "This can't be undone. Are you sure?"
    echo "Usage: gshred -v -z -n 5 -u --random-source=/dev/random <input file>"
    echo "gshred -v -z -n 5 -u --random-source=/dev/random\"\" " | pbcopy
   }
   send_mail_msg() {
      if is_param_empty "$@"
      then
        echo "you forgot to pass user@email and msg."
      else
        allparams=$@
        emailstr=$(echo $allparams | awk '{print $1}')
        pRest=$(echo $allparams | awk '{$1="";print $0}')
        dbg_print "echo $emailstr $pRest"
        echo $pRest | mail -s "ping from $USER" $emailstr
        unset emailstr
        unset allparams
      fi
   }
   #rename all files in current folder to remove tokens
   bulk_rename() {
    for i in *; 
    do 
        name="${i%.*}"; ext="${i##*.}"; 
        newname="${name//[._-]/ }"; mv "$i" "$newname.$ext" ; 
    done;
   }

   geoip() {
    curl -s http://www.geoiptool.com/en/?IP=$(myip) | 
    textutil -convert txt -stdin -stdout -format html | sed -n '/Hostname/,/Hostname/p'
   }

   ## Use this for Linux specific env config.
   set_linux_conf() {
     dbg_print "setting Linux env config."
     alias ls='ls --color=auto'
   }

   apply_env_cfg() {
     if file_present $HOME/$myshellrcfilename
     then
      echo "previous installation detected."
     fi
   }
   function run_web_server() {      
     python -m SimpleHTTPServer ${1:-16000} 
   }

   function run_web_server3() {
     python3 -m http.server 2020
   }

   ## generates a pdf copy of the the man page and loads 
   #  it in a preview app.
   xman() {
     #man -t "${1}" | open -f -a /Applications/Preview.app
     man -t $@ | open -f -a /Applications/Preview.app
   }
   #save tmp file - list and order of params 
   # 1:$USER  2:$tag 3:$shortform 4:$aliasstr 
   save_to_tmp_file_with_tagname() {     
     filename1=$HOME/$2     
     dbg_print "save_to_tmp_file_with_tagname param: $@"
     echo "$aliasstr" >> $filename1        
   }

   #save ref commands
   set_ref() {
     echo "set ref"
   }
   #generate tmp pass 
   gen_tmp_pass() {
     dd if=/dev/urandom bs=1 count=16 2>/dev/null | base64
   }



   #test run for the set alias.
   set_alias() {
     dbg_print "param: $@"
     allparams=$@
     shortform=$(echo $allparams | awk '{print $1}')
     pRest=$(echo $allparams | awk '{$1="";print $0}')
     dbg_print "list of param- 1:$shortform Rest:$pRest"
     #set the alias in system
     alias $shortform="$pRest"
     aliasstr="alias '$shortform=$pRest'"
     dbg_print "final str: $aliasstr"
     save_to_tmp_file_with_tagname $USER $tmpaliasfilename $shortform $aliasstr
   }

   #load and run tmp alias map list
   load_run_tmp_aliasmaplist() {
     if file_present $HOME/$tmpaliasfilename
     then
      source $HOME/$tmpaliasfilename
     fi
   }

   # save dir bookmarks. go to bookmark dir.
   push_and_pop_dir() {
     dirbookmarkfilelocation="$HOME/.dirbookmarks"
     mkdir -p $dirbookmarkfilelocation;
     if [[ "$1" == "push" ]]
     then
          echo `pwd` > $dirbookmarkfilelocation/.$2-tmp
     fi
     if [[ "$1" == "pop" ]]
     then         
          cd "`cat $dirbookmarkfilelocation/.$2-tmp`"
     fi     
   }
   #create dynamic alias entries.
   # 8 bookmarks.
   create_dir_bookmarks() {
     for i in {1..9}
     do
       itr="$i"
       save="s$itr"       
       go="g$itr"       
       tag="tmp$itr"
       aliasstr="alias '$save=push_and_pop_dir push $tag'"
       dbg_print $aliasstr
       alias $save="push_and_pop_dir push $tag"
       alias $go="push_and_pop_dir pop $tag"
     done     
   }

   #encrypt on demand. basic ssl symmetric key.
   encryptbyssl() {
     inputfile=$1
     if file_present $inputfile
      then
         openssl enc -aes-256-cbc -a -salt -in $inputfile -out $inputfile.openssl
         retval=$?         
         if [ $retval -eq 0 ]; 
          then
             echo "$inputfile.openssl created."
             echo "Make sure to \"shred\" the original plaintext file."
          else
             echo ""
         fi
      else
         echo "Missing input file name. Or file not found."
     fi
   }

   #decrypt on demand. basic ssl symmetric key.
   decryptbyssl() {
     inputfile=$1
     if file_present $inputfile
      then
         filename=$(basename "$inputfile")
         #echo $filename
         extension="${filename##*.}"
         #echo $extension
         filefrontname="${filename%.*}"
         #echo $filefrontname
         openssl enc -d -aes-256-cbc -a -salt -in $inputfile -out plain.$filefrontname
         retval=$?         
         if [ $retval -eq 0 ]; 
          then
             echo "plain.$filefrontname created."
          else
             echo ""
         fi             
      else
         echo "Missing input file name. Or file not found."
     fi
   }
   
   #show summary. todo: include more platform specific stuff.
   show_shell_summary() {

     dbg_print "summary type [$1]"
     if [ "$1" == "help" ]
     then
         printf "Environment version v1.1"
         echo "total number of alias :"`alias | wc -l`""
         #dns
         echo "external ip:" `myip2`
         mm
         echo "Wireless"$wifiNetworkname
         echo_if_nonempty $listoflocalIPs
         echo "Powered by : "$cpustring
         echo_if_nonempty $macmodelname
         echo "My name is : "$hostfirstname "( $osverstring )"
         echo_if_nonempty $macvram
         echo_if_nonempty $macresolution
         echo_if_nonempty $macbootvolume
         echo_if_nonempty $batterycyclecount
         echo_if_nonempty $notebookSerialNum   
     fi

     if [ "$2" == "ex" ]
      then
         if if_this_is_osx 
         then
            info=`system_profiler SPHardwareDataType output`
            echo $info
         fi
    fi

   }
   # query google via command line.
   function askg() {   
     Q="$@"; 
     GOOG_URL='https://www.google.com/search?q=';  
     AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36" elinks -dump "${GOOG_URL}${Q//\ /+}" | grep "\*" | head -1 
   }
   
   function aski {
     for i in {1..256};do p="  $i";echo -e "${p: -3} \\0$(($i/64*100+$i%64/8*10+$i%8))";
     done|cat -t|column -c120
   }

   # set common env stuff.
   set_common_env_conf() {
     dbg_print "setting generic env config for all OS."
     export PATH=$PATH:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
     set_ssh_alias
     alias h='history'
     alias pg='ping google.com'
     alias seta=set_alias
     alias gg='load_run_tmp_aliasmaplist; load_customized_shellrc;'
     func1=(show_shell_summary)
     alias i="$func1 help"
     alias ii="$func1 help ex"
     alias tdbg=toggle_shellrc_dbg_mode
     alias tp='cd /tmp'
     alias csc="build_run_cscope $1"  #runs cscope and ctags on source file tree.
     alias hdump="history >> $HOME/$historydumpfile"
     create_dir_bookmarks
     create_file_stash_grab_bookmarks
     alias vagupdigi='vagrant up --provider=digital_ocean'
     alias vaguprack='vagrant up --provider=rackspace'
     alias vagupaws='vagrant up --provider=aws'
     alias vag='vagrant status'
     alias tpass='gen_tmp_pass'
     alias dbox-uploader-install='install_dbox_uploader_tool'
     alias ddns='dns_selfregister_ip_with_digi_public_cli; dns_selfregister_ts_ip_with_digi_public_cli;'
     set_distro_name
     alias hs=hg

     alias myssh='ssh -C -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
     alias reloadenv='source /dev/stdin <<< "$(curl -s -L bit.ly/sh213)"'

     #alias myssh='ssh -C -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
     alias myssh='ssh -C -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
     alias mysshtout='timeout 4 ssh -C -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR'
     alias dlmp3music='youtube-dl  --audio-quality 0 --prefer-ffmpeg --extract-audio --audio-format mp3 --audio-quality 320k'
     alias dlmp4="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4"
     alias dlmp3book='youtube-dl  --audio-quality 0 --prefer-ffmpeg --extract-audio --audio-format mp3 --audio-quality 100k'

     alias ytdlpmp4="yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4"
    
     #alias reloadenv='curl -s termbin.com/n2bc | bash'
     alias reloadenv='source /dev/stdin <<< "$(curl -s -L bit.ly/sh213)"'
     alias reloadenvz='source /dev/stdin <<< "$(curl -s -L bit.ly/sh213)"'
     alias gst='ffsend_stash_the_file'
     alias grab='ffsend_grab_the_file'
     alias dboxcli=' $HOME/$dbox_uploader_script_linkname -f $HOME/$dbox_token_filename -s -p -k -h'
     alias gssh='goto_ssh_connect_to_local_vms'
     alias dnsselfip='dns_selfregister_ip_with_digi'
     alias gssh-user='goto_ssh_connect_to_vms_with_customuserid'
     alias gssh-runcloud='goto_ssh_connect_to_vms_with_runcloud'
     reportgen_set_target_vars
     alias zz='printf `dd if=/dev/urandom bs=1 count=12 2>/dev/null | base64`$ | pbcopy'
   }
   # entry point for respective platforms.
   set_os_specific_conf() {
     set_common_env_conf
     if [ "$osname_lowercase" == "linux" ] 
     then
      set_linux_conf
     elif [ "$osname_lowercase" == "darwin" ] 
     then
      set_osx_conf
     fi
   }

   function saveclip1() {
    onlineclipboardname="clip1"
    keyvaluebucket="a796f459"
    declare localParam=${*:-$(</dev/stdin)};
    dbg_print "input parameters are: \n $localParam \n"
    termbinurl=$(printf "$localParam" | nc termbin.com 9999)
    termbintoken=$(printf $termbinurl | awk -F/ '{print $4}')
    dbg_print "\n termbinurl=$termbinurl \n termbintoken=$termbintoken"
    curl -s -X PUT -u "keyvaluedbuser:nj,u*u77-p*K:P3z2-yRLCTC+1b6161S" https://keyvaluedb-publicapp.gcnode02.dns.block51.net/v1/kv/$keyvaluebucket --data "$termbintoken"
   }

   function saveclip9() {
    onlineclipboardname="clip9"
    keyvaluebucket="6bGi6UncEf6L"
    declare localParam=${*:-$(</dev/stdin)};
    dbg_print "input parameters are: \n $localParam \n"
    termbinurl=$(printf "$localParam" | nc termbin.com 9999)
    termbintoken=$(printf $termbinurl | awk -F/ '{print $4}')
    dbg_print "\n termbinurl=$termbinurl \n termbintoken=$termbintoken"
    ##curl -s -X POST https://api.keyvalue.xyz/$keyvaluebucket/$onlineclipboardname/$termbintoken;
    curl -s -X PUT -u "keyvaluedbuser:nj,u*u77-p*K:P3z2-yRLCTC+1b6161S" https://keyvaluedb-publicapp.gcnode02.dns.block51.net/v1/kv/$keyvaluebucket --data "$termbintoken"
   }


   function c9() {
    onlineclipboardname="clip9"
    keyvaluebucket="6bGi6UncEf6L"
    clipboardtoken=$(curl -s -u "keyvaluedbuser:nj,u*u77-p*K:P3z2-yRLCTC+1b6161S" https://keyvaluedb-publicapp.gcnode02.dns.block51.net/v1/kv/$keyvaluebucket | sed 's/[][]//g' | python3 -c "import sys, json; print(json.load(sys.stdin)['Value'])" | base64 -d)
    clipboardcontent=$(curl -s termbin.com/$clipboardtoken)    
    printf "$clipboardcontent\n"
   }

   
   ## using the termbin service and keyvalue.xyz cloud service
   function c1() {
    onlineclipboardname="clip1"
    keyvaluebucket="a796f459"
    clipboardtoken=$(curl -s -u "keyvaluedbuser:nj,u*u77-p*K:P3z2-yRLCTC+1b6161S" https://keyvaluedb-publicapp.gcnode02.dns.block51.net/v1/kv/$keyvaluebucket | sed 's/[][]//g' | python3 -c "import sys, json; print(json.load(sys.stdin)['Value'])" | base64 -d)
    clipboardcontent=$(curl -s termbin.com/$clipboardtoken)    
    printf "$clipboardcontent\n"
   }


   function saveclip2() {
    onlineclipboardname="clip2"
    keyvaluebucket="02fbc09c"
    declare localParam=${*:-$(</dev/stdin)};
    dbg_print "input parameters are: \n $localParam \n"
    termbinurl=$(printf "$localParam" | nc termbin.com 9999)
    termbintoken=$(printf $termbinurl | awk -F/ '{print $4}')
    dbg_print "\n termbinurl=$termbinurl \n termbintoken=$termbintoken"
    curl -s -X PUT -u "keyvaluedbuser:nj,u*u77-p*K:P3z2-yRLCTC+1b6161S" https://keyvaluedb-publicapp.gcnode02.dns.block51.net/v1/kv/$keyvaluebucket --data "$termbintoken"
   }
   
   ## using the termbin service and keyvalue.xyz cloud service
   function c2() {
    onlineclipboardname="clip2"
    keyvaluebucket="02fbc09c"
    clipboardtoken=$(curl -s -u "keyvaluedbuser:nj,u*u77-p*K:P3z2-yRLCTC+1b6161S" https://keyvaluedb-publicapp.gcnode02.dns.block51.net/v1/kv/$keyvaluebucket | sed 's/[][]//g' | python3 -c "import sys, json; print(json.load(sys.stdin)['Value'])" | base64 -d)
    clipboardcontent=$(curl -s termbin.com/$clipboardtoken)
    printf "$clipboardcontent\n"
   }

   function catenvfile() {
    #printf "$(curl -s -L bit.ly/sh213) \n Current Env."
    curl -s -L bit.ly/sh213;

   }
   function pingcheck() {
    printf "\nPingCheck is a PASS. @@@ *** VERY PASS v1.7 seven \n"
   }

   function save_to_clip() {
    onlineclipboardname=$1
    keyvaluebucket=$2
    declare localParam=${*:-$(</dev/stdin)};
    dbg_print "input parameters are: \n $localParam \n"
    termbinurl=$(printf "$localParam" | nc termbin.com 9999)
    termbintoken=$(printf $termbinurl | awk -F/ '{print $4}')
    dbg_print "\n termbinurl=$termbinurl \n termbintoken=$termbintoken"
    curl -s -X POST https://api.keyvalue.xyz/$keyvaluebucket/$onlineclipboardname/$termbintoken;
   }

   function print_clip() {
    onlineclipboardname=$1
    keyvaluebucket=$2
    clipboardtoken=$(curl -s https://api.keyvalue.xyz/$keyvaluebucket/$onlineclipboardname)
    clipboardcontent=$(curl -s termbin.com/$clipboardtoken)    
    printf "$clipboardcontent\n"
   }

   #create dynamic alias entries.
   # 8 bookmarks.
   function create_clipboard_bookmarks() {
     bucketArray=(e5a69500 eb08b43a 78325b8b)
     for i in {3..5}
     do
       itr="$i"
       save="saveclip$itr"       
       go="c$itr"       
       tag="tmp$itr"
       clipboardname="clip$itr"
       #aliasstr="alias '$save=save_to_clip $clipboardname ${bucketArray[3-$itr]}'"
       aliasstr="alias '$save=save_to_clip $clipboardname ${bucketArray[0]}'"
       dbg_print $aliasstr
       #alias $save="save_to_clip $clipboardname ${bucketArray[3-$itr]}"
       #alias $go="print_clip $clipboardname ${bucketArray[3-$itr]}"
       alias $save="save_to_clip $clipboardname ${bucketArray[0]}"
       alias $go="print_clip $clipboardname ${bucketArray[0]}"
     done     
   }

   ## prep-newvm-without-docker
   function prep_newVM_without_docker() {
       printf " sudo apt-get update -y; sudo apt install curl ntpdate python-pip vim -y; sudo pip install docker-compose; sudo echo \"vmuser ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/50-vmuser;  sudo groupadd -g 1050 vmuser; sudo useradd -u 1050 -g 1050 -ms /bin/bash vmuser; runuser -l vmuser -c 'cd; mkdir -p ~/.ssh; cd ~/.ssh; echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDP9kAi3cjkrdA3uMI5DglxRsRfcBq02i5/lRVup2E/ndOBBfbkl6USVpl+QWxxnTMsKxu2MXcOAHwTUY5b53n8AzXtV/VPatndQms5IgP11VsTsiU5mudwPf/s81eQfutYn9haD67wF4Azngdv/vUrFO2a4VMwZjSqJ+RAO1Hbkm4tWqeXjZo3QaErQg411zG6pvWdxLsGzvTc+SzY+Igft1Wx4NCTEgDv+HyEFSDYcPx9SGc9iBk2tOxALpS/htVpmSF+MKnu8ToIRn0ngunE2bi8cDpBPFO30JCa+V+eb4zEh6VbUXB97qBLjX6gUHycAM2sBWoKCR8e61tnsC27 mbuser@bigrock.local\" >> authorized_keys; curl icanhazip.com ';   \n"
   }
   ## prepnode execution
   function prepnode() {
    sudo apt-get update -y; sudo apt install curl ntpdate python-pip vim -y; sudo pip install docker-compose; sudo echo "vmuser ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/50-vmuser;  sudo groupadd -g 1050 vmuser; sudo useradd -u 1050 -g 1050 -ms /bin/bash vmuser; runuser -l vmuser -c 'cd; mkdir -p ~/.ssh; cd ~/.ssh; echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDP9kAi3cjkrdA3uMI5DglxRsRfcBq02i5/lRVup2E/ndOBBfbkl6USVpl+QWxxnTMsKxu2MXcOAHwTUY5b53n8AzXtV/VPatndQms5IgP11VsTsiU5mudwPf/s81eQfutYn9haD67wF4Azngdv/vUrFO2a4VMwZjSqJ+RAO1Hbkm4tWqeXjZo3QaErQg411zG6pvWdxLsGzvTc+SzY+Igft1Wx4NCTEgDv+HyEFSDYcPx9SGc9iBk2tOxALpS/htVpmSF+MKnu8ToIRn0ngunE2bi8cDpBPFO30JCa+V+eb4zEh6VbUXB97qBLjX6gUHycAM2sBWoKCR8e61tnsC27 mbuser@bigrock.local" >> authorized_keys; curl icanhazip.com ';   
   }

   ## add_ffmpeg_tools()
   function add_ffmpeg_tools() {
    sudo apt install chromium-codecs-ffmpeg ffmpeg ffmpeg-doc ffmpegthumbs libffmpegthumbnailer-dev libffms2-4 libxine2-ffmpeg moc-ffmpeg-plugin -y;
   }

   ## add dbox-uploader
   function install_dbox_uploader_tool() {
    sudo apt install git -y;
    dbox_uploader_dirname=".dbox-uploader"
    dbox_uploader_script_linkname=".dbox-uploader.sh"
    dbox_token_filename=".tokenfile"
    if file_present $HOME/$dbox_uploader_dirname
     then
        dbg_print "dropbox upload already installed"
     else
        git clone https://github.com/andreafabrizi/Dropbox-Uploader.git $HOME/$dbox_uploader_dirname
    fi
    ln -s -f $HOME/$dbox_uploader_dirname/dropbox_uploader.sh $HOME/$dbox_uploader_script_linkname
    alias dboxcli=' $HOME/$dbox_uploader_script_linkname -f $HOME/$dbox_token_filename -s -p -k -h'
   }

   function ffsend_set_stash_grab_params() {
     keyvalue_wwwservice="https://kvdb.io"
     keyvalue_bucket_id="UmWKVKBU1GyKwT4iThRKtP"
     keyvalue_urlholder_key="urlholder1"
     keyvalue_phraseholder_key="mangoberlinparis"
   }

   function ffsend_stash_the_file() {
     inputfile=$1
     keyvalue_wwwservice="https://kvdb.io"
     keyvalue_bucket_id="UmWKVKBU1GyKwT4iThRKtP"
     keyvalue_urlholder_key="urlholder1"
     keyvalue_phraseholder_key="mangoberlinparis"
     ffsend_clipboard_param='--copy'
     ffsend_install_tool

     if file_present $inputfile
      then
         #cmdoutput=`ffsend upload $inputfile -f --downloads 1 -y -P >> /tmp/.ffsend_log.txt`         
         cmdoutput=`ffsend upload $inputfile -f --downloads 1 -y -P`
         uploaded_fileurl=$(echo $cmdoutput | awk '{print $3}')
         uploaded_file_passphrase=$(echo $cmdoutput | cut -d ' ' -f 5-50)

         #openssl enc -d -aes-256-cbc -a -salt -in $inputfile -out plain.$filefrontname
         #retval=$?
         #if [ $retval -eq 0 ];
         # then
         #    echo "plain.$filefrontname created."
         # else
         #    echo ""
         #fi

         curl -d "$uploaded_fileurl" $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key
         curl -d "$uploaded_file_passphrase" $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key
         ##
         ## checking
      else
         echo "Missing input file name. Or file not found."
     fi

     #z1=`curl "$keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key"`
     #z2=`curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key`
     z1="$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key)"
     z2="$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key)"
     dbg_print "\nFILEURL - $z1\n"
     dbg_print "\nPHRASE - $z2\n"
   }

   function ffsend_stash_the_file_for_itr() {
     inputfile=$2
     keyvalue_wwwservice="https://kvdb.io"
     keyvalue_bucket_id="UmWKVKBU1GyKwT4iThRKtP"
     tagStr=$1
     urlholder_token="urlholder"
     keyvalue_urlholder_key="$urlholder_token$tagStr"
     phraseholder_token="mangoberlinparis"
     keyvalue_phraseholder_key="$phraseholder_token$tagStr"

     ffsend_clipboard_param='--copy'
     ffsend_install_tool

     if file_present $inputfile
      then
         #cmdoutput=`ffsend upload $inputfile -f --downloads 1 -y -P >> /tmp/.ffsend_log.txt`         
         cmdoutput=`ffsend upload $inputfile -f --downloads 1 -y -P`
         uploaded_fileurl=$(echo $cmdoutput | awk '{print $3}')
         uploaded_file_passphrase=$(echo $cmdoutput | cut -d ' ' -f 5-50)

         #openssl enc -d -aes-256-cbc -a -salt -in $inputfile -out plain.$filefrontname
         #retval=$?
         #if [ $retval -eq 0 ];
         # then
         #    echo "plain.$filefrontname created."
         # else
         #    echo ""
         #fi

         curl -d "$uploaded_fileurl" $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key
         curl -d "$uploaded_file_passphrase" $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key
         ##
         ## checking
      else
         echo "Missing input file name. Or file not found."
     fi

     #z1=`curl "$keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key"`
     #z2=`curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key`
     z1="$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key)"
     z2="$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key)"
     dbg_print "\nFILEURL - $z1\n"
     dbg_print "\nPHRASE - $z2\n"
   }

   function create_file_stash_grab_bookmarks() {
     for i in {1..9}
     do
       itr="$i"
       gstash="gst$itr"
       grab="grab$itr"       
       tag="tmp$itr"
       aliasstr="alias '$gstash=ffsend_stash_the_file_for_itr $tag'"
       dbg_print $aliasstr
       alias $gstash="ffsend_stash_the_file_for_itr $tag"
       alias $grab="ffsend_grab_the_file_for_itr $tag"
     done
   }

   function ffsend_set_stash_grab_params_for_itr() {
     keyvalue_wwwservice="https://kvdb.io"
     keyvalue_bucket_id="UmWKVKBU1GyKwT4iThRKtP"
     #keyvalue_urlholder_key="urlholder1"
     #keyvalue_phraseholder_key="mangoberlinparis"
     tagStr=$1
     urlholder_token="urlholder"
     keyvalue_urlholder_key="$urlholder_token$tagStr"
     phraseholder_token="mangoberlinparis"
     keyvalue_phraseholder_key="$phraseholder_token$tagStr"

   }

   function ffsend_grab_the_file_for_itr() {
    ffsend_install_tool
    ffsend_set_stash_grab_params_for_itr $1
    _tmp_ffsend_grab_url="$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key)"
    sudo ffsend download $_tmp_ffsend_grab_url -p "$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key)" -y >> /tmp/.ffsend_log.txt
    printf "\n"
   }

   function ffsend_grab_the_file() {
    ffsend_install_tool
    ffsend_set_stash_grab_params
    _tmp_ffsend_grab_url="$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_urlholder_key)"
    ffsend download $_tmp_ffsend_grab_url -p "$(curl $keyvalue_wwwservice/$keyvalue_bucket_id/$keyvalue_phraseholder_key)" -y >> /tmp/.ffsend_log.txt
    printf "\n"
   }
   function ffsend_install_tool() {
     ffsend_util="ffsend"
     which $ffsend_util
     retval=$?
     if [ $retval -eq 0 ];
       then
          dbg_print "ffsend found installed. No action necessary."
       else
          echo ""
          #sudo apt install snapd -y;
          #sudo snap install $ffsend_util;
          sudo wget "https://github.com/timvisee/ffsend/releases/download/v0.2.46/ffsend-v0.2.46-linux-x64-static" -O /usr/local/bin/ffsend
          sudo chmod +x /usr/local/bin/ffsend
     fi
   }

   function bootstrap_ubuntu_with_vmuser() {
    sudo apt-get update -y; sudo apt-get install iputils-ping curl ntpdate python-pip vim --fix-missing -y; sudo pip install docker-compose; sudo echo "vmuser ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/50-vmuser;  sudo groupadd -g 1050 vmuser; sudo useradd -u 1050 -g 1050 -ms /bin/bash vmuser; sudo /sbin/runuser -l vmuser -c 'cd; mkdir -p ~/.ssh; cd ~/.ssh; echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDP9kAi3cjkrdA3uMI5DglxRsRfcBq02i5/lRVup2E/ndOBBfbkl6USVpl+QWxxnTMsKxu2MXcOAHwTUY5b53n8AzXtV/VPatndQms5IgP11VsTsiU5mudwPf/s81eQfutYn9haD67wF4Azngdv/vUrFO2a4VMwZjSqJ+RAO1Hbkm4tWqeXjZo3QaErQg411zG6pvWdxLsGzvTc+SzY+Igft1Wx4NCTEgDv+HyEFSDYcPx9SGc9iBk2tOxALpS/htVpmSF+MKnu8ToIRn0ngunE2bi8cDpBPFO30JCa+V+eb4zEh6VbUXB97qBLjX6gUHycAM2sBWoKCR8e61tnsC27 vmuser@vmuser.local" >> authorized_keys; echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC77XmKj31MSBlZIWSDEiRmoZyd0q78AIbm2Xw3f7x3ZGBT+HtNrFVu42XeC8BhfUAmd54LaBZBMcM4Hav/Nuhb9XnWs4MfdRRcSIwsCjf9+1OQnmXt2o3ACYXS4wL86ypY7OPMNJWUjGtkh/798jk8LNi9zl0qRK88O7HrG3i88w== vmuser@dhcp-10-26-113-56" >> ~/.ssh/authorized_keys; curl icanhazip.com ';
   }

   function prep_ubuntu_system_with_basic_tools() {
     sudo apt-get update -y; sudo apt install git screen wget curl finger nload -y;
     sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y;
     sudo pip install glances;
   }

   function goto_ssh_connect_to_local_vms() {
     vm_hostname=$1
     myssh -i /Users/mbuser/codebase/mytools/vagrantConfigs/common/keypairs/node11-service.key "vmuser@$vm_hostname.dns.block51.net";
   }

   function goto_ssh_connect_to_vms_with_customuserid() {
     vm_hostname=$1
     vm_userid=$2
     myssh -i /Users/mbuser/codebase/mytools/vagrantConfigs/common/keypairs/node11-service.key "$vm_userid@$vm_hostname.dns.block51.net";
   }

   function goto_ssh_connect_to_vms_with_runcloud() {
     vm_hostname=$1     
     myssh -i /Users/mbuser/codebase/mytools/vagrantConfigs/common/keypairs/node11-service.key "runcloud@$vm_hostname.dns.block51.net";
   }

   function dns_selfregister_ip_with_digi() {
    sudo apt install jq -y; keyvaluebucket="YmVzdHRva2VuMzkzOTJ4d3d3"; 
    curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/dyndns.sh | \
    #DIGITALOCEAN_TOKEN="$(curl -s https://test-consul.dir.block51.net/v1/kv/$keyvaluebucket | sed 's/[][]//g' | python3 -c "import sys, json; print(json.load(sys.stdin)['Value'])" | base64 -d)" \
    DIGITALOCEAN_TOKEN=$(curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/digikey-rand.txt | openssl aes-256-cbc -pbkdf2 -a -salt -d) \
                                    DOMAIN="dns.block51.net" \
                                    NAME=$(cat /etc/hostname) SLEEP_INTERVAL=2 REMOVE_DUPLICATES="true" USE_INTERNAL_PRIVATE_IP="false" \
                                    bash
   }

   function dns_selfregister_ip_with_digi2() {
    sudo apt install jq -y; keyvaluebucket="YmVzdHRva2VuMzkzOTJ4d3d3"; 
    curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/dyndns.sh | DIGITALOCEAN_TOKEN="$(curl -s https://test-consul.dir.block51.net/v1/kv/$keyvaluebucket | sed 's/[][]//g' | python3 -c "import sys, json; print(json.load(sys.stdin)['Value'])" | base64 -d)" \
                                    DOMAIN="dns.block51.net" \
                                    NAME=$(cat /etc/hostname) SLEEP_INTERVAL=2 REMOVE_DUPLICATES="true" USE_INTERNAL_PRIVATE_IP="true" \
                                    bash
   }

   function dns_selfregister_ip_with_digi_public_cli() {
    sudo apt install jq -y;
    curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/dyndns.sh | DIGITALOCEAN_TOKEN=$(curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/digikey-rand.txt | openssl aes-256-cbc -pbkdf2 -a -salt -d) NAME=$(cat /etc/hostname) SLEEP_INTERVAL=2 REMOVE_DUPLICATES="true" USE_INTERNAL_PRIVATE_IP="true" DOMAIN="dns.block51.net" bash;
   }


   function dns_selfregister_ts_headless_ip_with_digi_public_cli() {
    sudo apt-get install jq -y;
    NAME="ts-$(cat /etc/hostname)"
    secureToken=$2
    printf "\n *** $secureToken \n"
    DIGITALOCEAN_TOKEN=$(curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/digikey-rand.txt | openssl aes-256-cbc -pbkdf2 -a -salt -d -k '$secureToken')
    curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/dyndns.sh | $DIGITALOCEAN_TOKEN NAME=$NAME SLEEP_INTERVAL=2 REMOVE_DUPLICATES="true" USE_TS_IP="true" USE_INTERNAL_PRIVATE_IP="true" DOMAIN="dns.block51.net" bash;
   }

   function dns_selfregister_ts_ip_with_digi_public_cli() {
    sudo apt-get install jq -y;
    NAME="ts-$(cat /etc/hostname)"
    curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/dyndns.sh | DIGITALOCEAN_TOKEN=$(curl -fsSL https://raw.githubusercontent.com/amit213/tools/master/env/vm-cloud-init-prep/digikey-rand.txt | openssl aes-256-cbc -pbkdf2 -a -salt -d) NAME=$NAME SLEEP_INTERVAL=2 REMOVE_DUPLICATES="true" USE_TS_IP="true" USE_INTERNAL_PRIVATE_IP="true" DOMAIN="dns.block51.net" bash;
   }


   function install_basic_ubuntu_python_tools() {
    sudo apt update -y;
    sudo apt install python3-pip -y;
   }

   function install_basic_chatgpt_tools() {
    sudo pip3 install shell-gpt --user;
    pip3 install askGPT;
    sudo apt install jq -y;
    curl -sS https://raw.githubusercontent.com/0xacx/chatGPT-shell-cli/main/install.sh | sudo -E bash;


    mkdir -p interactive-chatgpt-cli;
    cd interactive-chatgpt-cli/;
    git clone https://github.com/amazingpaddy/Interactive-ChatGPT-CLI.git;
    cd Interactive-ChatGPT-CLI/;
    pip3 install -r requirements.txt;
    pip3 install prompt_toolkit;
    printf "run python3 cli.py --memory-stream\n";

   }

   function install_basic_chatgpt_python3.11() {
    sudo add-apt-repository ppa:deadsnakes/ppa;
    sudo apt update -y;
    sudo apt install python3.11 -y;
    sudo apt install python3.11 python3.11-distutils -y;
    curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11
    pip3.11 install prompt_toolkit;

   }

   function install_basic_chatgpt_aichat() {
    curl https://sh.rustup.rs -sSf | sh;
    source "$HOME/.cargo/env";
    cargo install --force aichat;
   }

   function install_basic_cli_browsers() {
    sudo apt-get update -y;
    sudo apt install elinks lynx -y;

   }

   function install_basic_macosx_utils() {
    brew install --cask rectangle;

   }


   function run_chatgpt_loop() {
     targetfile_gptoutputlog="chatgpt-session-log.txt";

     for i in {1..500}; do printf "\nPrompt (hit ^D to end the prompt): "; \
      prompt_text=$(</dev/stdin); \
      printf "\n ==============\nPrompt: $prompt_text\n" >> $targetfile_gptoutputlog; \
      printf "\n ============== \n"; \
      sgpt --chat quicktry "$prompt_text" | tee -a $targetfile_gptoutputlog; \
      printf " ============ \n" | tee -a $targetfile_gptoutputlog; done;
   }

   

   function install_basic_ubuntu_startertools() {
    sudo apt update -y;
    sudo apt install screen iputils-ping jq xclip xsel -y;


   }

   function install_microk8s_ubuntu() {
    sudo snap install microk8s --classic;
    sudo usermod -a -G microk8s $USER;
    sudo chown -f -R $USER ~/.kube
    newgrp microk8s
   }

   function install_webmin_ubuntu() {
    sudo apt update -y;
    sudo apt upgrade -y;
    sudo apt install software-properties-common apt-transport-https -y;
    sudo wget -q http://www.webmin.com/jcameron-key.asc -O- | sudo apt-key add -;
    sudo add-apt-repository "deb [arch=amd64] http://download.webmin.com/download/repository sarge contrib";
    sudo apt-get update -y;
    sudo apt install webmin -y;
    sudo systemctl status webmin;
    sudo dpkg -l | grep webmin;

   }

   function install_wpcli_ubuntu() {
    sudo apt-get update -y;
    curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar;
    chmod +x wp-cli.phar;
    sudo mv wp-cli.phar /usr/local/bin/wp;
    wp --info;
   }

   function install_guacamole_ubuntu() {

     printf "git clone https://github.com/boschkundendienst/guacamole-docker-compose.git";
     
   }

   function install_docker_compose() {
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose; sudo chmod +x /usr/local/bin/docker-compose;
   }

   function install_tailscale_client() {
    curl -fsSL https://tailscale.com/install.sh | sh;
   }

   function install_docker_engine() {
    curl -fsSL get.docker.com | sh;
   }

   function git_set_commit_env() {
    git config --global user.email "amit.regular@outlook.com";
    git config --global user.name "amit213";
   }
   function reset_file_perms() {
    find . -type f -exec chmod 644 {} \;
   }
   function reset_dir_perms() {
    find . -type d -exec chmod 755 {} \;
   }

   function reportgen_set_target_vars() {
     targetdir_csvforpdf="targetdir-with-csv-for-pdf";

     dirforprep="csvfilesforprep";
     
     srcfile01competitoranalysis="01-Competitive-Analysis.csv"
     targetfile_competitoranalysis="1-competitor-analysis.csv"

     srcfile03relatedquestions="03-Related-Questions.csv"
     targetfile_relatedquestions="2-related-questions.csv"

     srcfile04impterms="04-Important-Terms.csv"
     targetfile_impterms="3-z-important-terms.csv"

     srcfile02competitorcontentoutline="02-Competitors-Outlines.csv"
     targetfile_competitorcontentoutline="6-Competitor-Outlines.csv"

     srcfile05alttext="05-Alt-Texts-Used-in-Top-Ranking-Contents.csv"
     targetfile_alttext="5-Alt-Text-Used-in-Top-Ranking-Contents.csv"

     targetfile_kwvolumecpc="7-kw-cpc-volume-data.pdf"

     srcfilePAAfile="*paa*"
     targetfile_paanewtitlebank="4-new-title-topic-bank.csv"

   }

   function report_prep_answerpub_csv_csvlook() {
    csvgrep -c 1 -i -m "Alphabeticals" *suggestions* -K 1  | csvcut -c 1-6 -l | sed -e 's/line_number/No./g' | csvlook;
   }


   function report_prep_answerpub_csv() {
     relatedcontentfile="3-related-content-ideas.csv";
     reportgen_set_target_vars;
     mkdir -p $targetdir_csvforpdf;
     #csvgrep -c 1 -i -m "Alphabeticals" *suggestions* -K 1  | csvcut -c 1-6 -l | sed -e 's/line_number/No./g' > 3-related-content-ideas.csv;
     csvgrep -c 1 -i -m "Alphabeticals" *suggestions* -K 1  | csvcut -c 1-6 -l | sed -e 's/line_number/No./g' > $targetdir_csvforpdf/$relatedcontentfile;
     csvlook $targetdir_csvforpdf/$relatedcontentfile;
   }

   function report_prep_corecontent_csv() {
     dirforprep="csvfilesforprep";
     
     reportgen_set_target_vars;

     mkdir -p $targetdir_csvforpdf;
     unzip -q -n -d $dirforprep *.zip;


     cp $dirforprep/$srcfile01competitoranalysis $targetdir_csvforpdf/$targetfile_competitoranalysis;
     csvcut $dirforprep/$srcfile03relatedquestions -l | sed -e 's/line_number/No./g' > $targetdir_csvforpdf/$targetfile_relatedquestions;

     #csvcut $dirforprep/$srcfile04impterms -l | sed -e 's/line_number/No./g' > $targetdir_csvforpdf/$targetfile_impterms;
     csvcut $dirforprep/$srcfile04impterms -l \
     | sed -e 's/line_number/No./g' -e 's/KEYWORD/ *Keyword Cloud* Top Ranking Valuable Keywords People Also Search For/g'  \
     > $targetdir_csvforpdf/$targetfile_impterms;


     for i in {1..45}; do name=`csvgrep  -c 1 -r "(?:^|\W)$i(?:$|\W)" \
      $dirforprep/$srcfile01competitoranalysis | sed 1d | csvcut -c 8 | awk -F/ '{print $3}'`; \
      csvcut -c $i -x $dirforprep/$srcfile02competitorcontentoutline -l \
      | sed -e 's/line_number/No./g' -e "s/COMPETITOR/ COMPETITOR     -------   $name   ------- /g" \
        -e "s/Checking if the site connection is secure/Content Not Available/g"  \
       >> $targetdir_csvforpdf/$targetfile_competitorcontentoutline; \
        printf "\n, \n\n, \n" >> $targetdir_csvforpdf/$targetfile_competitorcontentoutline; done;


      # 05-Alt-Texts-Used-in-Top-Ranking-Contents.csv
      csvcut $dirforprep/$srcfile05alttext -l \
      | sed -e 's/line_number/No./g' -e "s/ALT text/ ALT Text used by Top Ranking (Page 1 Page 2) content for your KeyWords on Google/g"  \
      > $targetdir_csvforpdf/$targetfile_alttext;


      #06
      cp *keywords*.pdf $targetdir_csvforpdf/$targetfile_kwvolumecpc;
      pdfscale -r A3 $targetdir_csvforpdf/$targetfile_kwvolumecpc;

      ##7 PAA data
      report_prep_paa_csv;

   }

   function report_prep_paa_csv() {
      ##7
      if file_present $srcfilePAAfile
       then
         ## PAA
         csvcut $srcfilePAAfile -l \
          | sed -e 's/line_number/No./g' -e "s/PAA Title/ New Article Topic Title Candidates/g"  \
          -e "s/URL Title/ Blog Post Title Bank/g" \
          > $targetdir_csvforpdf/$targetfile_paanewtitlebank;
       else
        printf "\nSkipping PAA as data not availabe.\n"
      fi
   }

   function reportgen_pdf_set_meta_info() {
      IFS=$'\n';
      #for i in `ls SEO-Content*.pdf`; 
      for i in `find . -type f -name '*SEO-Content*.pdf'`
        do printf "$i"; 
           pdfinfo -meta $i;
           exiftool -Title="SEO-Content-Competitor-SERP-Audit-Report by Brandwise" \
           -Author="reports@brandwiseglobal.com" -Subject="PDF Metadata" -overwrite_original $i;
           printf "\n --------- \n";
           pdfinfo -meta $i;
           printf "\n"; 
        done;
   }

   function reportgen_go() {
     reportgen_set_target_vars;
     report_prep_answerpub_csv;
     report_prep_corecontent_csv;
   }

   function reportgen_pdf_set_restrictions() {
      IFS=$'\n';
      targetdir_securefiles="secure-files";
      mkdir -p $targetdir_securefiles;
      for i in `find . -type f -name '*SEO-Content*.pdf'`
        do printf "$i"; 
           qpdf  --allow-weak-crypto  --encrypt "" "estherajewumi" 128 \
           --print=none --extract=n --modify=none --annotate=n \
           --accessibility=n --modify-other=n --accessibility=n \
           --assemble=n -- "$i" ./$targetdir_securefiles/"$i"
           printf "\n"; 
        done;    
   }



    #1362  docker run --privileged -it -d -v \
    # `pwd`/run-temp-ubuntu-docker-with-ts-data-dir:/opt/temp-ubuntu-datadir \
    # --name=temp-ubuntu-node-with-ts --hostname gptnode.ts ghcr.io/amit213/ubuntu-tailscale-ssh-app:v1.10.1-gpt
    #1363  docker ps
    #1364  docker logs temp-ubuntu-node-with-ts
   function run-temp-ubuntu_docker_node_with_ts() {

      targettmpdatadir="datadir";
      srcdockerimage="amit213sf/ubuntu-tailscale-ssh-app:v1.9"
      targetdirincontainer="/opt/temp-ubuntu-datadir"
      targetcontanername="temp-ubuntu-node-with-ts"
      targetcontainerhostname="node-on-$hostname"
      mkdir -p $targettmpdatadir;
      docker run --privileged -it -d \
      -v `pwd`/$targettmpdatadir:$targetdirincontainer \
      --name=$targetcontanername --hostname $targetcontainerhostname $srcdockerimage;
      docker logs $targetcontanername;

   }



##


## ========== quick
 
set_os_specific_conf $osname_lowercase
