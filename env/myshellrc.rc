#!/bin/sh
#!/bin/bash
#ss 
#author :: amit213
#revision history / summary.
#milestones

## This is the long running shell rc..

echo "Mr. Anderson, Welcome Home."

#shell prompt facelift
#export PS1="\u@\h:[\W]$ "
PS1='\[\e[1;32m\]\u@\h\[\e[m\]:\[\e[1;34m\][\W]\[\e[m\]$ '


## global variables. platform agnostic.
  osname=`uname`
  osname_lowercase=`uname | tr '[:upper:]' '[:lower:]'`
  hostname=`hostname`
  myshellrcfilename=".myshellrc.rc" 
  tmpaliasfilename=".temp-aliasmap.tmp"
  quoteofthedayfilename=".quote-of-the-day"
  mycustomshellrcfilename=".customshellrc"
  _TRUE=0
  _FALSE=1
  shellrc_dbg=0
  cpustring=""
  hostfirstname=""
  osverstring=""


#local section
  alias s='source ~/$myshellrcfilename'

#screen section
  alias sc='screen -dr'
  alias sls='screen -ls'

#global section
  alias ll='ls -lh'
  alias M='du -sh * | grep M'
  alias G='du -sh * | grep G'


  alias s1='echo `pwd` > /tmp/.s1-tmp'
  alias g1='cd "`cat /tmp/.s1-tmp`"'
  alias s2='echo `pwd` > /tmp/.s2-tmp'
  alias g2='cd "`cat /tmp/.s2-tmp`"'
  alias s3='echo `pwd` > /tmp/.s3-tmp'
  alias g3='cd "`cat /tmp/.s3-tmp`"'



## ==========
#global functions
   is_debug_mode_on() {
     #shell rc ON(1) off(0) debug mode     
     return $shellrc_dbg
   }
   toggle_shellrc_dbg_mode() {
     if (( $shellrc_dbg ))
      then
         shellrc_dbg=0
         echo "shell debug is now OFF"         
      else
         shellrc_dbg=1
         echo "shell debug is now ON"
     fi
   }
   dbg_print_on() {
     is_debug_mode_on
     dbg=$?
     [ $dbg -eq 1 ] && $@
   }
   dbg_print() {
     is_debug_mode_on
     dbgflag=$?
     callerapi=${FUNCNAME[1]}
     linenumb=${LINENO}
     if [ $dbgflag -eq 1 ] && [ "$@" ]
     then
        #we will just print the msg.
        msgval="$@"       
        echo "$callerapi: $msgval"
     else
        #do nothing. 
        msgval="$@"        
     fi
   }
   echo_if_nonempty() {
     if [[ "$@" ]]
      then
        echo $@
      else
        dbg_print $@        
      fi
   }
   myecho() {
      funcname=$1
      #msgval = entire msg except for the first param.
      msgval=$(echo $@ | awk '{$1="";print $0}')
      echo "$1 :$msgval"
   }

   # check if file exists
   is_file_present() {
     flag=0
     dbg_print "checking if file: $1 exists?"
     dbg_print "[${*}]"
     if [ -z "$1" ]
     then
       return $flag  #empty param.
     fi
     if [  -L $1 ] 
     then
        dbg_print "$1 is a link and was found."
        flag=1
     elif [[ -f $1 ]]
     then
        dbg_print "$1 is a file and was found."
        flag=1
     elif [[ -s $1 ]]
     then
        dbg_print "file $1 found."
     fi
     return $flag 
   }

   #wrapper over is file present
   file_present() {
     dbg_print "[${*}]"
     is_file_present $1
     if (( "$?" ))
      then
        return $_TRUE
       else
        return $_FALSE
     fi
   }

   if_this_is_osx() {     
     if [ "$osname_lowercase" == "darwin" ] 
     then
      return $_TRUE
     else
      return $_FALSE
     fi
   }

   #setup docker specific aliases
   set_docker_alias() {
     #alias drmi='docker images --no-trunc | grep none | awk '{print $3}' | xargs docker rmi'
     alias dimg='docker images'
     alias dps='docker ps'

   }

   function hg () { 
     history | grep $* ;
   }

   mm() {
     top -l 1 | head -n 10 | grep PhysMem
   }


   sayg() { 
     wget -q -U Mozilla -O $(tr ' ' _ <<< "$1"| 
     cut -b 1-15).mp3 "http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=$(tr ' ' + <<< "$1")"; 
   }

   listen() {
     lsof -iTCP:$1 -sTCP:LISTEN
   }
   chsm() {
     openssl dgst -md5 $1
   }
   xkcd() {
     curl -s 'http://xkcd.com/rss.xml' | xpath '//item[1]/description/text()' 2>&1 | 
     sed -n 's/.*title="\([^"]*\)".*/\1/p' | fold -s
   }

   xkcd-view() {
     wget -O /tmp/.xkcd_$(date +%y-%m-%d).png `lynx --dump http://xkcd.com/ | 
     grep png` > /dev/null 2>&1 ; open /tmp/.xkcd_$(date +%y-%m-%d).png
   }

   xkcd-random() {
     wget -O /tmp/.xkcd_$(date +%y-%m-%d).png `lynx --dump dynamic.xkcd.com/comic/random/ |
     grep png` > /dev/null 2>&1 ; open /tmp/.xkcd_$(date +%y-%m-%d).png
   }


   weather() {
    curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<YOURZIPORLOCATION>}" |
    perl -ne '/<title>([^<]+)/&&printf "%s: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';
   }

   #print all local IPs for osx
   get_all_local_ip_for_osx() {
     listoflocalIPs=`ifconfig | grep inet | grep netmask | awk '{print $2}'`
     tmplist=""     
     for i in $listoflocalIPs
     do
        tmplist="$i  |  $tmplist  "
     done
     tmplist="LocalIPs --> $tmplist"
     listoflocalIPs=$tmplist
     unset tmplist     
   }
   #setup ssh related aliases
   set_target_ssh_user_ip_port() {
     echo "target-ip-port $1 $2 $3"   /tmp/.$USER-target-ip-port.tmp
   }

   ssh_to_target_ip_port() {
     if file_present /tmp/.$USER-target-ip-port.tmp
     then
      userval=`cat /tmp/.mbuser-target-ip-port.tmp | tail -n 1 | awk '{print $2}'`
      ipval=`cat /tmp/.mbuser-target-ip-port.tmp | tail -n 1 | awk '{print $3}'`
      portval=`cat /tmp/.mbuser-target-ip-port.tmp | tail -n 1 | awk '{print $4}'`
      echo "running ssh -C $userval@$ipval -p $portval"
      ssh -C $userval@$ipval -p $portval
     else
      echo "target ip port is not set."
     fi     
   }

   set_ssh_alias() {
     alias target-user-ip-port=set_target_ssh_user_ip_port
     alias tsh=ssh_to_target_ip_port
   }

   #load up custom configuration
   load_customized_shellrc() {    
     if file_present $HOME/$mycustomshellrcfilename
     then
        dbg_print "loading custom shellrc : $HOME/$mycustomshellrcfilename"
        source $HOME/$mycustomshellrcfilename
     else
        dbg_print "no custom shellrc found. file: $HOME/$mycustomshellrcfilename"
     fi
   }

   # search engine on console
   function search {
          Q="$@";GOOG_URL='https://www.google.com/search?tbs=li:1&q=';AGENT="Mozilla/4.0";
          stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}");echo "$stream" | 
          grep -o "href=\"/url[^\&]*&amp;" | 
          sed 's/href=".url.q=\([^\&]*\).*/\1/';
   }

   function q {
          wget -q -O ~/$quoteofthedayfilename https://www.goodreads.com/quotes_of_the_day; 
          cat ~/$quoteofthedayfilename | grep '&ldquo;\|/author/show' | 
          sed -e 's/<[a-zA-Z\/][^>]*>//g' | sed 's/&ldquo;//g' | sed 's/&rdquo;//g'
          #osascript -e 'display notification "Lorem ipsum dolor sit amet" with title "Title"'
   }

   function myshred {
      #openssl enc -aes-256-ecb -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | 
      #base64)" -nosalt < /dev/zero > $1
      echo ""
   }

   ## Use this for OSX specific env config.
   set_osx_conf() {
     dbg_print "setting OSX env config."
     #ls gets colors
     export CLICOLOR=1
     #export LSCOLORS=Exfxcxdxbxegedabagacad
     export LSCOLORS=GxFxCxDxBxegedabagaced
     export GREP_OPTIONS='--color=auto'

     alias listdns='scutil --dns | grep nameserver'
     alias bat='ioreg -l | grep Capacity'        
     get_all_local_ip_for_osx
     ## using grc  (generic color utility for console)
     #source "`brew --prefix`/etc/grc.bashrc"
     set_docker_alias
     wifiNetworkname=`/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep ' SSID'`
     cpustring=`sysctl -n machdep.cpu.brand_string`
     hostfirstname=`scutil --get ComputerName`
     osverstring=`sw_vers | awk -F':\t' '{print $2}' | paste -d ' ' - - -`
     #macvram=`system_profiler SPDisplaysDataType | grep VRAM`
     #macresolution=`system_profiler SPDisplaysDataType | grep Resolution`
     #macmodelname=`system_profiler SPHardwareDataType | grep "Model Name"`
     batterycyclecount=`system_profiler SPPowerDataType | grep "Cycle Count"`
     macbootvolume=`system_profiler SPSoftwareDataType | grep "Boot Volume"`
   }

   function myip {
     wget --no-check-certificate -q checkip.dyndns.org -O ~/.index.html && 
     cat ~/.index.html|cut -d ' ' -f 6 | cut -d '<' -f 1
   }
   
   function myip2 {
    curl -s ip.telize.com
    #curl -s icanhazip.com
   }

   #shred the file / dir
   shred() {
    echo "Are you sure? It can't be undone."
    echo "Usage: gshred -v -z -n 5 -u --random-source=/dev/random <input file>"
    echo "gshred -v -z -n 5 -u --random-source=/dev/random\"\" " | pbcopy
   }

   geoip() {
    curl -s http://www.geoiptool.com/en/?IP=$(myip) | 
    textutil -convert txt -stdin -stdout -format html | sed -n '/Hostname/,/Hostname/p'
   }

   ## Use this for Linux specific env config.
   set_linux_conf() {
     dbg_print "setting Linux env config."
     alias ls='ls --color=auto'
   }

   apply_env_cfg() {
     if file_present $HOME/$myshellrcfilename
     then
      echo "previous installation detected."
     fi
   }

   #save tmp file - list and order of params 
   # 1:$USER  2:$tag 3:$shortform 4:$aliasstr 
   save_to_tmp_file_with_tagname() {     
     filename1=$HOME/$2     
     dbg_print "save_to_tmp_file_with_tagname param: $@"
     echo "$aliasstr" >> $filename1        
   }

   #test run for the set alias.
   set_alias() {
     dbg_print "param: $@"
     allparams=$@
     shortform=$(echo $allparams | awk '{print $1}')
     pRest=$(echo $allparams | awk '{$1="";print $0}')
     dbg_print "list of param- 1:$shortform Rest:$pRest"
     #set the alias in system
     alias $shortform="$pRest"
     aliasstr="alias '$shortform=$pRest'"
     dbg_print "final str: $aliasstr"
     save_to_tmp_file_with_tagname $USER $tmpaliasfilename $shortform $aliasstr
   }

   #load and run tmp alias map list
   load_run_tmp_aliasmaplist() {
     if file_present $HOME/$tmpaliasfilename
     then
      source $HOME/$tmpaliasfilename
     fi
   }

   #encrypt on demand. basic ssl symmetric key.
   encryptbyssl() {
     inputfile=$1
     if file_present $inputfile
      then
         openssl enc -aes-256-cbc -a -salt -in $inputfile -out $inputfile.openssl
         retval=$?         
         if [ $retval -eq 0 ]; 
          then
             echo "$inputfile.openssl created."
             echo "Make sure to \"shred\" the original plaintext file."
          else
             echo ""
         fi
      else
         echo "Missing input file name. Or file not found."
     fi
   }

   #decrypt on demand. basic ssl symmetric key.
   decryptbyssl() {
     inputfile=$1
     if file_present $inputfile
      then
         filename=$(basename "$inputfile")
         #echo $filename
         extension="${filename##*.}"
         #echo $extension
         filefrontname="${filename%.*}"
         #echo $filefrontname
         openssl enc -d -aes-256-cbc -a -salt -in $inputfile -out plain.$filefrontname
         retval=$?         
         if [ $retval -eq 0 ]; 
          then
             echo "plain.$filefrontname created."
          else
             echo ""
         fi             
      else
         echo "Missing input file name. Or file not found."
     fi
   }
   
   #show summary. todo: include more platform specific stuff.
   show_shell_summary() {     
     dbg_print "summary type [$1]"
     if [ "$1" == "help" ]
     then
         echo "total number of alias :"`alias | wc -l`""
         #dns
         echo "external ip:" `myip2`
         mm
         echo "Wireless"$wifiNetworkname
         echo_if_nonempty $listoflocalIPs
         echo "Powered by : "$cpustring
         echo_if_nonempty $macmodelname
         echo "My name is : "$hostfirstname "( $osverstring )"
         echo_if_nonempty $macvram
         echo_if_nonempty $macresolution
         echo_if_nonempty $macbootvolume
         echo_if_nonempty $batterycyclecount         
     fi

     if [ "$2" == "ex" ]
      then
         if if_this_is_osx 
         then
            info=`system_profiler SPHardwareDataType output`
            echo $info
         fi
    fi

   }

   function askg() {   
     Q="$@"; 
     GOOG_URL='https://www.google.com/search?q=';  
     AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36" elinks -dump "${GOOG_URL}${Q//\ /+}" | grep "\*" | head -1 
   }
   
   function aski {
     for i in {1..256};do p="  $i";echo -e "${p: -3} \\0$(($i/64*100+$i%64/8*10+$i%8))";
     done|cat -t|column -c120
   }

   set_common_env_conf() {
     dbg_print "setting generic env config for all OS."
     export PATH=$PATH:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
     set_ssh_alias
     alias h='history'
     alias pg='ping google.com'
     alias seta=set_alias
     alias gg=load_run_tmp_aliasmaplist
     func1=(show_shell_summary)
     alias i="$func1 help"
     alias ii="$func1 help ex"
     alias tdbg=toggle_shellrc_dbg_mode
   }

   set_os_specific_conf() {
     set_common_env_conf
     if [ "$osname_lowercase" == "linux" ] 
     then
      set_linux_conf
     elif [ "$osname_lowercase" == "darwin" ] 
     then
      set_osx_conf
     fi
   }

## ==========
 
set_os_specific_conf $osname_lowercase

